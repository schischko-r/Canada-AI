<!DOCTYPE html>
<html lang="en">
<head>
    <title>AI Forest Wildfire Analysis</title>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="IE=Edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="This sample shows how to add the map style picker control to the map." />
    <meta name="keywords" content="Microsoft maps, map, gis, API, SDK,  navigation controls, map style, style picker, map type, satellite, aerial, imagery" />
    <meta name="author" content="Microsoft Azure Maps" />

    <base href="/">

    <link rel="stylesheet" href="https://raw.githubusercontent.com/schischko-r/Canada-AI/master/WebApplication3/wwwroot/css/style.css" type="text/css" />
    <!-- Add references to the Azure Maps Map control JavaScript and CSS files. -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>

    <!-- Add references to the Azure Maps Map Drawing Tools JavaScript and CSS files. -->
    <link rel="shortcut icon" href="favicon.ico" />
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/drawing/0/atlas-drawing.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/drawing/0/atlas-drawing.min.js"></script>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>



    <script type='text/javascript'>
        var map, datasource;
        var azureMapsSubscriptionKey = 'p3R9NNrAlX8xyDjtv2IeqbBMUZ8SRtbg4N-BtDXfWnc';
        //var stateBoundaries = 'canada_provinces.geojson';
        var stateBoundaries = 'https://raw.githubusercontent.com/schischko-r/Canada-AI/master/WebApplication3/Views/Home/canada_provinces.geojson';
        var simplePopupTemplate = '<div class="customInfobox"><b><font color="#eeeeee" size="4">Всего: {Total}$</font></b><br><b>Штат:</b> <font color="#eeeeee">{State}</font><br><b>Площадь пожара:</b> <font color={timeColor}>{Size} hectares</font><br><b>Постоянные затраты:</b> <font color="#eeeeee">{Fixed}$</font><br><b>Внештатные затраты:</b> <font color="#eeeeee">{Variable}$</font><br></div>';
        //var geojsonFeed = 'SamplePoiDataSet.json';
        var geojsonFeed = 'https://raw.githubusercontent.com/schischko-r/Canada-AI/master/WebApplication3/Views/Home/fires.json';


        function GetMap() {
            //Initialize a map instance.
            map = new atlas.Map('myMap', {
                center: [-95, 58],
                style: 'satellite_road_labels',
                zoom: 3,
                view: 'Auto',

                authOptions: {
                    authType: 'subscriptionKey',
                    subscriptionKey: azureMapsSubscriptionKey
                }
            });

            map.events.add('ready', function () {
                popup = new atlas.Popup();
                cluster: false,
                    datasource = new atlas.source.DataSource(null, {
                    });
                map.sources.add(datasource);

                var pointLayer = new atlas.layer.BubbleLayer(datasource, null, {
                    radius: 8,
                    color: '#d65a31',
                    strokeWidth: 1.5,
                    strokeColor: "#eeeeee",
                    cluster: false,
                    filter: ['!', ['has', 'point_count']] //Filter out cluste#f95959 points from this layer.
                });

                map.events.add('click', pointLayer, pointClicked);

                map.layers.add(pointLayer);

                datasource.importDataFromUrl(geojsonFeed);

                map.controls.add(new atlas.control.StyleControl({

                    //mapStyles: 'all'

                    mapStyles: ['night', 'satellite_road_labels']
                }), {
                    position: 'bottom-left'
                });

                datasource = new atlas.source.DataSource();
                map.sources.add(datasource);

                datasource.importDataFromUrl(stateBoundaries);

                var polygonLayer = new atlas.layer.PolygonLayer(datasource, null, {
                    fillColor: 'rgba(57, 62, 70, 1)'
                });



                var lineLayer = new atlas.layer.LineLayer(datasource, null, {
                    strokeColor: 'rgba(214, 90, 49, 1)',
                    strokeWidth: 1
                });

                map.layers.add([polygonLayer, lineLayer], 'labels');

                var SIZE = Math.pow(10, 5) * 100


                function pointClicked(e) {

                    var waterarr = []
                    var parkarr = []
                    var cities = []
                    var buildings = []
                    var citySTR = ""
                    var loadingMsg = '<b><font color="#f95959" size="5">Загрузка...</font></b>'
                    document.getElementById("content").innerHTML = loadingMsg;

                    if (e.shapes && e.shapes.length > 0) {
                        var content, coordinate;

                        if (e.shapes[0] instanceof atlas.Shape && e.shapes[0].getType() === 'Point') {
                            var properties = e.shapes[0].getProperties();
                            content = '<div class="customInfobox">' + loadingMsg + '</div>';
                            coordinate = e.shapes[0].getCoordinates();
                        } else if (e.shapes[0].type === 'Feature' && e.shapes[0].geometry.type === 'Point') {


                            content = '<div class="customInfobox">' + loadingMsg +'</div>';

                            coordinate = e.shapes[0].geometry.coordinates;
                        }

                        if (content && coordinate) {
                            popup.setOptions({
                                content: content,
                                position: coordinate
                            });

                            popup.open(map);

                        }

                        ajax()

                        function ajax() {
                            $.ajax({
                                type: "GET",
                                url: "http://www.mapquestapi.com/geocoding/v1/reverse?key=QpoHaIdp5vsKSyJtHhx1t4pDjq087gHO&location=" + coordinate[1] + "," + coordinate[0] + "&includeRoadMetadata=true&includeNearestIntersection=true",
                                dataType: 'html',
                                success: function (data) {
                                    var json = JSON.parse(data)
                                    var PROV = json['results'][0]['locations'][0]['adminArea3']
                                    features(PROV)
                                }

                            })
                        }

                        function features(PROV) {
                            var size = SIZE * properties.Size


                            $.ajax({

                                url: 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/tilequery/' + coordinate[0] + "," + coordinate[1] + '.json?radius=' + size + '&access_token=pk.eyJ1Ijoic2NoaXNjaGtvciIsImEiOiJja2MzOXpicHAwN3FsMzBxdXU5Z2EwYXlmIn0.4eWp3mohElC2RCbSSS8_Eg',
                                dataType: 'html',
                                type: 'GET',

                                success: function (result) {

                                    var json = JSON.parse(result)



                                    var infr = 0, water = 0, forest = 0
                                    for (step = 0; step < json.features.length; step++) {
                                        switch (json.features[step].properties.tilequery.layer) {
                                            case 'admin':
                                                infr += 3
                                                water += 3
                                                forest += 4
                                                break;
                                            case 'aeroway':
                                                infr += 5;
                                                break;
                                            case 'airport_label':
                                                switch (json.features[step].properties.maki) {
                                                    case 'airport':
                                                        infr += 10;
                                                        break;
                                                    case 'airfield':
                                                        infr += 8;
                                                        break;
                                                    case 'heliport':
                                                        infr += 5;
                                                        break;
                                                    case 'rocket':
                                                        infr += 5;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'building':
                                                infr += 10;
                                                buildings.push(json.features[step].properties.tilequery.distance)

                                                break;
                                            case 'housenum_label':
                                                infr += 1;
                                                break;
                                            case 'landuse_overlay':
                                                switch (json.features[step].properties.class) {
                                                    case 'national_park':
                                                        infr += 20;
                                                        forest += 2;
                                                        break;
                                                    case 'wetland':
                                                        forest += 4;
                                                        break;
                                                    case 'wetland_noveg':
                                                        forest += 1;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'landuse':
                                                switch (json.features[step].properties.class) {
                                                    case 'aboriginal_lands':
                                                        infr += 2;
                                                        break;
                                                    case 'agriculture':
                                                        infr += 2;
                                                        forest += 5;
                                                        break;
                                                    case 'airport':
                                                        infr += 9;
                                                        break;
                                                    case 'cemetery':
                                                        infr += 2;
                                                        break;
                                                    case 'grass':
                                                        forest += 5;
                                                        break;
                                                    case 'hospital':
                                                        infr += 5;
                                                        break;
                                                    case 'park':
                                                        infr += 5;
                                                        forest += 4;
                                                        break;
                                                    case 'piste':
                                                        infr += 5;
                                                        forest += 2;
                                                        break;
                                                    case 'pitch':
                                                        infr += 6;
                                                        break;
                                                    case 'school':
                                                        infr += 9;
                                                        break;
                                                    case 'scrub':
                                                        forest += 7;
                                                        break;
                                                    case 'wood':
                                                        forest += 10;
                                                        break;
                                                    case 'facility':
                                                        infr += 8;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;
                                            case 'motorway_junction':
                                                infr += 2;
                                                break;

                                            case 'natural_label':
                                                switch (json.features[step].properties.class) {
                                                    case 'bay':
                                                        water += 10;
                                                        break;
                                                    case 'canal':
                                                        infr += 5;
                                                        water += 5;
                                                        break;
                                                    case 'dock':
                                                        infr += 8;
                                                        water += 5;
                                                        break;
                                                    case 'ocean':
                                                        water += 9;
                                                        break;
                                                    case 'reservoir':
                                                        infr += 3;
                                                        water += 8;
                                                        break;
                                                    case 'river':
                                                        water += 3;
                                                        break;
                                                    case 'sea':
                                                        water += 8;
                                                        break;
                                                    case 'stream':
                                                        water += 2;
                                                        break;
                                                    case 'water':
                                                        water += 9;
                                                        break;
                                                    case 'wetland':
                                                        water += 2;
                                                        forest += 7;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;

                                                }
                                                break;

                                            case 'place_label':
                                                switch (json.features[step].properties.type) {
                                                    case 'city':
                                                        infr += 10;
                                                        cities.push([json.features[step].properties.type, json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                        break;
                                                    case 'town':
                                                        infr += 9;
                                                        cities.push([json.features[step].properties.type, json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                        break;
                                                    case 'village':
                                                        cities.push([json.features[step].properties.type, json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                        infr += 5;
                                                        break;
                                                    case 'hamlet':
                                                        cities.push([json.features[step].properties.type, json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                        infr += 7;
                                                        break;
                                                    case 'quarter':
                                                        cities.push([json.features[step].properties.type, json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                        infr += 7;
                                                        break;
                                                    case 'neighbourhood':
                                                        cities.push([json.features[step].properties.type, json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                        infr += 6;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'poi_label':
                                                infr += 2;
                                                switch (json.features[step].properties.type) {
                                                    case 'National Park':
                                                        parkarr.push([json.features[step].properties.name, json.features[step].properties.tilequery.distance])
                                                }
                                                break;
                                            case 'road':
                                                switch (json.features[step].properties.class) {
                                                    case 'motorway':
                                                        infr += 6;
                                                        break;
                                                    case 'motorway_link':
                                                        infr += 2;
                                                        break;
                                                    case 'trunk':
                                                        infr += 7;
                                                        break;
                                                    case 'trunk_link':
                                                        infr += 2;
                                                        break;
                                                    case 'primary':
                                                        infr += 8;
                                                        break;
                                                    case 'primary_link':
                                                        infr += 2;
                                                        break;
                                                    case 'secondary':
                                                        infr += 6;
                                                        break;
                                                    case 'secondary_link':
                                                        infr += 2;
                                                        break;
                                                    case 'tertiary':
                                                        infr += 3;
                                                        break;
                                                    case 'tertiary_link':
                                                        infr += 1;
                                                        break;
                                                    case 'street':
                                                        infr += 3;
                                                        break;
                                                    case 'street_limited':
                                                        infr += 2;
                                                        break;
                                                    case 'pedestrian':
                                                        infr += 1;
                                                        break;
                                                    case 'construction':
                                                        infr += 1;
                                                        break;
                                                    case 'track':
                                                        infr += 2;
                                                        break;
                                                    case 'service':
                                                        infr += 2;
                                                        break;
                                                    case 'ferry':
                                                        infr += 3;
                                                        break;
                                                    case 'path':
                                                        infr += 1;
                                                        break;
                                                    case 'major_rail':
                                                        infr += 5;
                                                        break;
                                                    case 'minor_rail':
                                                        infr += 3;
                                                        break;
                                                    case 'service_rail':
                                                        infr += 2;
                                                        break;
                                                    case 'aerialway':
                                                        infr += 1;
                                                        break;
                                                    case 'golf':
                                                        infr += 2;
                                                        break;
                                                    case 'roundabout':
                                                        infr += 4;
                                                        break;
                                                    case 'mini_roundabout':
                                                        infr += 2;
                                                        break;
                                                    case 'turning_circle':
                                                        infr += 2;
                                                        break;
                                                    case 'turning_loop':
                                                        infr += 2;
                                                        break;
                                                    case 'traffic_signals':
                                                        infr += 1;
                                                        break;
                                                    case 'junction':
                                                        infr += 3;
                                                        break;
                                                    case 'intersection':
                                                        infr += 3;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;
                                            case 'structure':
                                                infr += 1;
                                                break;
                                            case 'transit_stop_label':
                                                switch (json.features[step].properties.mode) {
                                                    case 'rail':
                                                        infr += 5;
                                                        break;
                                                    case 'metro_rail':
                                                        infr += 7;
                                                        break;
                                                    case 'light_rail':
                                                        infr += 5;
                                                        break;
                                                    case 'tram':
                                                        infr += 6;
                                                        break;
                                                    case 'monorail':
                                                        infr += 6;
                                                        break;
                                                    case 'funicular':
                                                        infr += 4;
                                                        break;
                                                    case 'bicycle':
                                                        infr += 3;
                                                        break;
                                                    case 'bus':
                                                        infr += 3;
                                                        break;
                                                    case 'ferry':
                                                        infr += 2;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'water':
                                                water += 10;
                                                waterarr.push([json.features[step].properties.tilequery.layer, json.features[step].properties.tilequery.distance])
                                                break;

                                            case 'waterway':
                                                switch (json.features[step].properties.class) {
                                                    case 'river':
                                                        water += 5;
                                                        break;
                                                    case 'canal':
                                                        infr += 2;
                                                        water += 4;
                                                        break;
                                                    case 'stream':
                                                        water += 3;
                                                        break;
                                                    case 'stream_intermittent':
                                                        water += 2;
                                                        break;
                                                    case 'drain':
                                                        water += 2;
                                                        break;
                                                    case 'ditch':
                                                        water += 1;
                                                        break;
                                                }
                                                break;

                                        }

                                    }

                                    //var newWindow = window.open();
                                    //newWindow.document.write(result);

                                    res = [infr, forest, water]
                                    sum = res.reduce((a, b) => a + b, 0);
                                    res = [Math.round(infr * 100 / sum), Math.round(forest * 100 / sum), Math.round(water * 100 / sum)]



                                    if (cities.length != 0) {
                                        for (step = 0; step < cities.length; step++) {
                                            citySTR += 'Название: ' + cities[step][1] + '. Тип: ' + cities[step][0] + '. Расстояние: ' + Math.round((cities[step][2]/1000) * 100) / 100 + ' km<br>';

                                        }
                                        citySTR = "<font color = '#f95959';><b>Города которые могут быть затронуты: <br></font></b>" + citySTR + '<br>'

                                    }
                                    else {
                                        if (buildings.length != 0) {
                                            citySTR = "<b><font color = '#f95959';>При пожаре могут быть задеты здания!<br></font></b><br>";
                                        }
                                    }
                                    if (parkarr.length != 0) {
                                        citySTR += "<b><font color = '#f95959';>Национальные парки которые могут быть затронуты: <br></font></b>"
                                        for (step = 0; step < parkarr.length; step++) {
                                            citySTR += 'Название: ' + parkarr[step][0] + '. Расстояние: ' + Math.round((parkarr[step][1] / 1000) * 100) / 100 + ' km<br>';
                                        }
                                        var forest = ['Hydrophyllum canadense - Гидpoфиллyм канадский', 'Tanacetum huronense - Пижма гуронская', 'Tsuga canadensis - Тсуга канадская'];
                                        var animals = ['Ursus americanus carlottae - Барибал', 'Enhydra lutris - Калан', 'Falco peregrinus - Сапсан', 'Tympanuchus cupido - Большой степной тетерев', 'Dermochelys coriacea - Кожистая черепаха','Rangifer tarandus - Северный олень']

                                        var f_amount = Math.round(Math.random() * (forest.length - 2) + 1);
                                        var a_amount = Math.round(Math.random() * (animals.length - 2) + 1);

                                        var ind = 0
                                        var used = [];
                                        citySTR += "<br><b>Растения, которым угрожает пожар:<br></b>"
                                        for (var i = 0; i < f_amount; i++) {
                                            ind = Math.round(Math.random() * (forest.length - 2) + 1);
                                            while (used.includes(ind)){
                                                ind = Math.round(Math.random() * (forest.length - 2) + 1);
                                            }
                                            citySTR += forest[ind] + "<br>"
                                            used.push(ind)

                                        }

                                        var ind = 0
                                        var used = [];
                                        citySTR += "<br><b>Животные, которым угрожает пожар:<br></b>"
                                        for (var i = 0; i < a_amount; i++) {
                                            ind = Math.round(Math.random() * (animals.length - 2) + 1);
                                            while (used.includes(ind)) {
                                                ind = Math.round(Math.random() * (animals.length - 2) + 1);
                                            }
                                            citySTR += animals[ind] + "<br>"
                                            used.push(ind)

                                        }

                                    }
                                    if (waterarr.length != 0) {
                                        citySTR += "<br><font color = '#e3e3e3';>Воды для тушения будет достаточно!<br></font>"
                                    }

                                    else {
                                        citySTR += "<br><font color = '#f95959';>Воды для тушения может быть недостаточно!<br></font>"
                                    }

                                    $.ajax({
                                        url: 'http://api.openweathermap.org/data/2.5/weather?lat=' + coordinate[1].toFixed() + '&lon=' + coordinate[0].toFixed() + '&appid=c6dfa17d0a8acd78f0aed0116b2a06b8',
                                        dataType: 'html',
                                        type: 'GET',

                                        success: function (result) {

                                            var json = JSON.parse(result)
                                            weatherClass = json.weather.main
                                            switch (weatherClass) {
                                                //'CB Dry': -1, 'CB Wet': 1, 'Clear': 0, 'Cloudy': 2, 'Rainshowers': 3
                                                case 'Thunderstorm':
                                                    res[3] = 3
                                                    break;
                                                case 'Drizzle':
                                                    res[3] =1
                                                    break;
                                                case 'Rain':
                                                    res[3] =3
                                                    break;
                                                case 'Snow':
                                                    res[3] =1
                                                    break;
                                                case 'Mist':
                                                    res[3] =1
                                                    break;
                                                case 'Smoke':
                                                    res[3] = -1
                                                    break;
                                                case 'Haze':
                                                    res[3] =1
                                                    break;
                                                case 'Dust':
                                                    res[3] =-1
                                                    break;
                                                case 'Fog':
                                                    res[3] =1
                                                    break;
                                                case 'Sand':
                                                    res[3] =-1
                                                    break;
                                                case 'Ash':
                                                    res[3] = -1
                                                    break;
                                                case 'Squall':
                                                    res[3] =2-1
                                                    break;
                                                case 'Tornado':
                                                    res[3] =-1
                                                    break;
                                                case 'Clear':
                                                    res[3] =0
                                                    break;
                                                case 'Clouds':
                                                    res[3] =2
                                                    break;
                                                default:
                                                    res[3] =0
                                            }
                                            mainCalc(PROV, res)
                                        }
                                    })
                                }
                            })
                        }

                        function mainCalc(state,percentage) {
                            $.ajax({
                                type: 'POST',
                                url: '@Url.Action("Button_click", "Home")',
                                dataType: 'html',
                                data: ({
                                    //insert your parameters to pass to controller
                                    province: state,
                                    hectares: properties.Size,
                                    type: properties.Type,
                                    town: percentage[0],
                                    water: percentage[2],
                                    flayer: properties.Layer,
                                    weather: percentage[3],
                                }),
                                success: function (result) {
                                    var nameList = result.split(";");
                                    var fix = parseInt(nameList[0])
                                    var variable = parseInt(nameList[1])
                                    var days = parseInt(nameList[2])
                                    var total = fix + variable

                                    content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, state).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Предупреждений нет!').replace(/{Color}/g, '#e3e3e3').replace(/{Days}/g, days);

                                    if (days > 7) {
                                        content = content.replace(/{timeColor}/g, '#f95959')
                                    }

                                    else {
                                        content = content.replace(/{timeColor}/g, '#eeeeee')
                                    }


                                    popup.setOptions({
                                        //Update the content of the popup.
                                        content: content,

                                        //Update the position of the popup with the symbols coordinate.
                                        position: coordinate
                                    });

                                    citySTR += "Пожар будет потушен через: " + days + ' дней. <br>'


                                    if (properties.Layer == 'Crown') {
                                        citySTR += '<br>Тип пожара: <font color = "#f95959";>верховой</font>'
                                    }
                                    else {
                                        citySTR += '<br>Тип пожара: <font color = "#e3e3e3";>низовой</font>'
                                    }
                                    //'CB Dry': -1, 'CB Wet': 1, 'Clear': 0, 'Cloudy': 2, 'Rainshowers': 3
                                    switch (percentage[3]) {
                                        case -1:
                                            citySTR += '<br>Текущая погода: <font color = "#f95959";>сухо</font>'
                                            break;
                                        case 1:
                                            citySTR += '<br>Текущая погода: <font color = "#e3e3e3";>высокая влажность</font>'
                                            break;
                                        case 0:
                                            citySTR += '<br>Текущая погода: <font color = "#f95959";>ясно</font>'
                                            break;
                                        case 2:
                                            citySTR += '<br>Текущая погода: <font color = "#e3e3e3";>облачно</font>'
                                            break;
                                        case 3:
                                            citySTR += '<br>Текущая погода: <font color = "#e3e3e3";>дождь</font>'
                                            break;
                                        default:
                                    }

                                    if (properties.Type == 'UC') {
                                        citySTR += '<br>Текущий статус: <font color = "#e3e3e3";>очаг локализирован</font>'
                                    }
                                    else if (properties.Type == 'BH') {
                                        citySTR += '<br>Текущий статус: <font color = "#f95959";>сдерживается</font>'
                                    }
                                    else {
                                        citySTR += '<br>Текущий статус: <font color = "#e3e3e3";>тушится</font>'
                                    }


                                    document.getElementById("content").innerHTML = citySTR;

                                }
                            });
                        }

                    }

                }

            })

        }
    </script>
</head>

<body onload="GetMap()">
    <br>
    <div id="left-column">
        <div id="myMap" style="position:relative;width:100%;min-width:290px;height:800px;"></div>
    </div>
    <div id="right-column">
        <div class="content" style="display: flex; justify-content: center; align-items: center;">
            <p id="content">
                <b> Приветствуем!</b><br /><br />

                На данной модели <b>постоянными расходами</b> будут считаться расходы на топливо для специализированного транспорта, зарплаты работникам службы пожарной охраны, и прочие штатные расходы. <br />
                <br /><b>Внештатные расходы</b> - расходы на покрытие потенциального ущерба, который может нанести пожар,
                если его вовремя не потушить. При расчете учитываются окружающие очаг пожара особенности рельефа, города, водоемы и национальные парки. Также модель предполагает опасность пожара для видов флоры и фауны в данном регионе, которые
                уже находятся под угрозой вымирания. <br /><br />При расчете <b>времени</b>, которое пойдет на тушение пожара учитываются такие критерии как текущая погода, размер пожара (в гектарах), тип пожара (верховой, низовой)
                и его текущий статус (локализован, под контролем и т.д).<br /><br />
                <b>Выберите точку на карте! </b>
            </p>
        </div>
        
    </div>
    <div id="footer">
        <br>
        
            <hr>
            <footer>&copy;Vacanda</footer>
    </div>
</body>
</html>