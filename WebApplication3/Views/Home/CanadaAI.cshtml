<!DOCTYPE html>
<html lang="en">
<head>
    <title>AI Forest Wildfire Analysis</title>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="IE=Edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="This sample shows how to add the map style picker control to the map." />
    <meta name="keywords" content="Microsoft maps, map, gis, API, SDK,  navigation controls, map style, style picker, map type, satellite, aerial, imagery" />
    <meta name="author" content="Microsoft Azure Maps" />

    <style>
        .customInfobox {
            width: 250px;
            height: 180px;
            text-align: center;
        }

        .Wildfire {
            font-size: 20px;
            font-weight: bold;
            margin-top: 5px;
            margin-bottom: 7px;
        }

        .Alert {
            font-size: 14px;
            font-weight: bold;
            margin-top: 5px;
            margin-bottom: 7px;
        }


        body {
            font-family: "Century Gothic", sans-serif;
            background: url("images/fire.jpg") no-repeat center center fixed;
            background-size: cover;
        }

        .glavn {
            background-color: #000000;
            font-size: 20px;
            padding: 20px;
        }

            .glavn li {
                text-transform: uppercase;
                font-weight: bold;
                display: inline-block;
                padding-left: 80px;
            }


                .glavn li a {
                    text-decoration: none;
                    color: white;
                }

                    .glavn li a:hover {
                        color: firebrick;
                    }

        footer {
            color: white;
            height: 100px;
        }

        h1 {
            color: white;
        }

        table {
            color: white;
            width: 800px;
            height: 400px;
        }

        table, td {
            border-collapse: collapse;
        }

        td {
            border: 1px solid white;
            vertical-align: middle;
            text-align: center;
        }

        input[type="text"], textarea {
            text-transform: capitalize;
        }

        input[type="text"], input[type="email"], input[type="tel"], textarea {
            border-radius: 10px;
        }

            input[type="text"], input[type="email"], input[type="tel"], textarea:focus {
                border-radius: 10px;
            }

            input[type="text"], input[type="email"], input[type="tel"], textarea:active {
                outline: none;
            }

            textarea:focus {
                outline: none;
            }

        form {
            width: 300px;
            color: white;
        }

        .all {
            box-shadow: 0.4em 0.4em 5px rgba(122,122,122,0.5);
        }

        .bound {
            font-size: 25px;
            font-weight: bold;
        }
    </style>

    <!-- Add references to the Azure Maps Map control JavaScript and CSS files. -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>

    <!-- Add references to the Azure Maps Map Drawing Tools JavaScript and CSS files. -->
    <link rel="shortcut icon" href="favicon.ico" />
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/drawing/0/atlas-drawing.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/drawing/0/atlas-drawing.min.js"></script>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>


    </script>
    <script type='text/javascript'>
        var map, datasource;
        var azureMapsSubscriptionKey = 'p3R9NNrAlX8xyDjtv2IeqbBMUZ8SRtbg4N-BtDXfWnc';
        //var stateBoundaries = 'canada_provinces.geojson';
        var stateBoundaries = 'https://raw.githubusercontent.com/schischko-r/WebApplication3/master/WebApplication3/Views/Home/canada_provinces.geojson';
        var simplePopupTemplate = '<div class="customInfobox"><div class="Wildfire"><b>Total:</b> {Total}$</div><b>State:</b> {State}<br><b>Burning area:</b> {Size} hectares<br><b>Fixed Cost:</b> {Fixed}$<br><b>Variable Cost:</b> {Variable}$<br><div class="Alert"><font color = "{Color}";>{Alert}<font></div></div>';
        //var geojsonFeed = 'SamplePoiDataSet.json';
        var geojsonFeed = 'https://raw.githubusercontent.com/schischko-r/WebApplication3/master/WebApplication3/Views/Home/fires.json';
        function GetMap() {
            //Initialize a map instance.
            map = new atlas.Map('myMap', {
                center: [-95, 58],
                zoom: 3,
                view: 'Auto',
                //Add your Azure Maps key to the map SDK. Get an Azure Maps key at https://azure.com/maps. NOTE: The primary key should be used as the key.
                authOptions: {
                    authType: 'subscriptionKey',
                    subscriptionKey: azureMapsSubscriptionKey
                }
            });

            //Wait until the map resources are ready.
            map.events.add('ready', function () {
                //PopUps
                //Create a reusable popup.
                popup = new atlas.Popup();
                cluster: false,

                    //Create a data source and add it to the map.
                    datasource = new atlas.source.DataSource(null, {
                    });
                map.sources.add(datasource);

                var pointLayer = new atlas.layer.BubbleLayer(datasource, null, {
                    radius: 8,
                    color: '#4B0082',
                    strokeWidth: 2,
                    strokeColor: "#DAA520",
                    cluster: false,
                    filter: ['!', ['has', 'point_count']] //Filter out cluste#ff0000 points from this layer.
                });

                map.events.add('click', pointLayer, pointClicked);

                //Add the clusterBubbleLayer and two additional layers to the map.
                map.layers.add(pointLayer);

                //Import the GeoJSON data into the data source.
                datasource.importDataFromUrl(geojsonFeed);
                //PopUps
                //Add a style control to the map.
                map.controls.add(new atlas.control.StyleControl({
                    //Optionally specify which map styles you want to appear in the picker.
                    //All styles available with the S0 license tier appear by default in the control.
                    //If using a S1 tier license, you can use the mapStyles option to add premium styles such as 'satellite' and 'satellite_road_labels' to the control.
                    //To add all available styles, you can use the 'all' keyword.
                    mapStyles: 'all'

                    //Alternatively, specify an array of all the map styles you would like displayed in the style picker.
                    //mapStyles: ['road', 'road_shaded_relief', 'grayscale_light', 'night', 'grayscale_dark', 'satellite', 'satellite_road_labels', 'high_contrast_dark']
                }), {
                    position: 'bottom-left'
                });
                //State
                //Create a data source and add it to the map.
                datasource = new atlas.source.DataSource();
                map.sources.add(datasource);

                //Load the US state boundary data.
                datasource.importDataFromUrl(stateBoundaries);

                //Add a layer for rendering filled polygon area.
                var polygonLayer = new atlas.layer.PolygonLayer(datasource, null, {
                    fillColor: 'rgba(0, 157, 255, 0.2)'
                });

                //Add a layer for rendering a different color polygon for representing a hover state.
                var polygonHoverLayer = new atlas.layer.PolygonLayer(datasource, null, {
                    fillColor: 'rgba(150, 50, 255, 0.2)',

                    //Only polygons with a "GEO_ID" property with a value of '' will be rende#ff0000.
                    filter: ['==', ['get', 'GEO_ID'], '']
                });

                //Add a layer for rendering the styled outline of the polygon data.
                var lineLayer = new atlas.layer.LineLayer(datasource, null, {
                    strokeColor: 'white',
                    strokeWidth: 1
                });

                //Add the layers to be map, but render it below the labels.
                map.layers.add([polygonLayer, polygonHoverLayer, lineLayer], 'labels');

                // When the user moves their mouse over the polygonLayer, we'll update the filter in
                // the polygonHoverLayer to only show the matching state, thus creating a hover effect.
                //State
                //PopUps2
                function pointClicked(e) {
                    //Make sure the event occur#ff0000 on a point feature.
                    if (e.shapes && e.shapes.length > 0) {
                        var content, coordinate;

                        //Check to see if the first value in the shapes array is a Point Shape.
                        if (e.shapes[0] instanceof atlas.Shape && e.shapes[0].getType() === 'Point') {
                            var properties = e.shapes[0].getProperties();
                            content = simplePopupTemplate.replace(/{Total}/g, properties.Total).replace(/{State}/g, properties.State).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, properties.Variable).replace(/{Fixed}/g, properties.Fixed).replace(/{Alert}/g, 'Предупреждения').replace(/{Color}/g, '#000000');
                            coordinate = e.shapes[0].getCoordinates();
                        } else if (e.shapes[0].type === 'Feature' && e.shapes[0].geometry.type === 'Point') {

                            //Check to see if the feature is a cluster.
                            if (e.shapes[0].properties.cluster) {
                                content = '<div style="padding:10px;">Cluster of ' + e.shapes[0].properties.point_count + ' symbols</div>';
                            } else {
                                //Feature is likely from a VectorTileSource.
                                content = simplePopupTemplate.replace(/{Total}/g, properties.Total).replace(/{State}/g, properties.State).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, properties.Variable).replace(/{Fixed}/g, properties.Fixed).replace(/{Alert}/g, 'Предупреждения').replace(/{Color}/g, '#000000');
                            }

                            coordinate = e.shapes[0].geometry.coordinates;
                        }

                        if (content && coordinate) {
                            //Populate the popupTemplate with data from the clicked point feature.
                            popup.setOptions({
                                //Update the content of the popup.
                                content: content,

                                //Update the position of the popup with the symbols coordinate.
                                position: coordinate
                            });

                            //Open the popup.
                            popup.open(map);
                        }

                        $.ajax({
                          type: 'POST',
                          url: '@Url.Action("Button_click", "Home")',
                          dataType: 'html',
                          data: ({
                          //insert your parameters to pass to controller
                              province: properties.State,
                              hectares: properties.Size,
                              town: properties.Town,
                              water: properties.Water
                          }),
                            success: function (result) {
                                var nameList = result.split(";");
                                var fix = parseInt(nameList[0])
                                var variable = parseInt(nameList[1])
                                var total = fix + variable

                                content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, properties.State).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Предупреждений нет!').replace(/{Color}/g, '#008000')

                                if (properties.Water > 30) {
                                    content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, properties.State).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Предупреждений нет! <br> Воды для тушения достаточно! <br> Пожар будет потушен быстро!').replace(/{Color}/g, '#008000');
                                }

                                if (properties.Water < 10) {
                                    content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, properties.State).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Внимание! <br> Вблизи может оказаться <br> недостаточно воды для тушения!').replace(/{Color}/g, '#ff0000');
                                }

                                if (properties.Town > 50) {
                                    content= simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, properties.State).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Внимание! <br> Могут быть затронуты города <br> или национальные парки!').replace(/{Color}/g, '#ff0000');
                                }

                                
                                popup.setOptions({
                                    //Update the content of the popup.
                                    content: content,

                                    //Update the position of the popup with the symbols coordinate.
                                    position: coordinate
                                });
                            }
                        });


                    }
                }
                //PopUps2
            });

        }
    </script>
</head>

<body onload="GetMap()">
    <div id="myMap" style="position:relative;width:70%;min-width:290px;height:600px;"></div>
    
    <input type="button" title="Evaluate the cost of wild fire" value="Evaluate" onclick="location.href='@Url.Action("Button_click", "Home")'" />
    <hr>
    <footer>
        &copy;Vacanda
    </footer>
</body>
</html>