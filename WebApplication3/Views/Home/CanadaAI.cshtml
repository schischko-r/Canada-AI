<!DOCTYPE html>
<html lang="en">
<head>
    <title>AI Forest Wildfire Analysis</title>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="IE=Edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="This sample shows how to add the map style picker control to the map." />
    <meta name="keywords" content="Microsoft maps, map, gis, API, SDK,  navigation controls, map style, style picker, map type, satellite, aerial, imagery" />
    <meta name="author" content="Microsoft Azure Maps" />

    <style>
        .customInfobox {
            width: 250px;
            height: 220px;
            text-align: center;
        }

        .Wildfire {
            font-size: 20px;
            font-weight: bold;
            margin-top: 5px;
            margin-bottom: 7px;
        }

        .Alert {
            font-size: 14px;
            font-weight: bold;
            margin-top: 5px;
            margin-bottom: 7px;
        }


        body {
            font-family: "Century Gothic", sans-serif;
            background: url("images/fire.jpg") no-repeat center center fixed;
            background-size: cover;
        }

        .glavn {
            background-color: #000000;
            font-size: 20px;
            padding: 20px;
        }

            .glavn li {
                text-transform: uppercase;
                font-weight: bold;
                display: inline-block;
                padding-left: 80px;
            }


                .glavn li a {
                    text-decoration: none;
                    color: white;
                }

                    .glavn li a:hover {
                        color: firebrick;
                    }

        footer {
            color: white;
            height: 100px;
        }

        h1 {
            color: white;
        }

        table {
            color: white;
            width: 800px;
            height: 400px;
        }

        table, td {
            border-collapse: collapse;
        }

        td {
            border: 1px solid white;
            vertical-align: middle;
            text-align: center;
        }

        input[type="text"], textarea {
            text-transform: capitalize;
        }

        input[type="text"], input[type="email"], input[type="tel"], textarea {
            border-radius: 10px;
        }

            input[type="text"], input[type="email"], input[type="tel"], textarea:focus {
                border-radius: 10px;
            }

            input[type="text"], input[type="email"], input[type="tel"], textarea:active {
                outline: none;
            }

            textarea:focus {
                outline: none;
            }

        form {
            width: 300px;
            color: white;
        }

        .all {
            box-shadow: 0.4em 0.4em 5px rgba(122,122,122,0.5);
        }

        .bound {
            font-size: 25px;
            font-weight: bold;
        }
    </style>

    <!-- Add references to the Azure Maps Map control JavaScript and CSS files. -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>

    <!-- Add references to the Azure Maps Map Drawing Tools JavaScript and CSS files. -->
    <link rel="shortcut icon" href="favicon.ico" />
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/drawing/0/atlas-drawing.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/drawing/0/atlas-drawing.min.js"></script>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>


 
    <script type='text/javascript'>
        var map, datasource;
        var azureMapsSubscriptionKey = 'p3R9NNrAlX8xyDjtv2IeqbBMUZ8SRtbg4N-BtDXfWnc';
        //var stateBoundaries = 'canada_provinces.geojson';
        var stateBoundaries = 'https://raw.githubusercontent.com/schischko-r/Canada-AI/master/WebApplication3/Views/Home/canada_provinces.geojson';
        var simplePopupTemplate = '<div class="customInfobox"><div class="Wildfire"><b>Total:</b> {Total}$</div><b>State:</b> {State}<br><b>Burning area:</b> <font color = "{timeColor}";>{Size}</font> hectares<br><b>Fixed Cost:</b> {Fixed}$<br><b>Variable Cost:</b> {Variable}$<br><div class="Alert"><font color = "{Color}";>{Alert}<font></div><font color = "{timeColor}";>Пожар будет потушен через {Days} дней</font><br><font color = "#000000";>Текущий статус пожара:</font> {Status}</div>';
        //var geojsonFeed = 'SamplePoiDataSet.json';
        var geojsonFeed = 'https://raw.githubusercontent.com/schischko-r/Canada-AI/master/WebApplication3/Views/Home/fires.json';



        function GetMap() {
            //Initialize a map instance.
            map = new atlas.Map('myMap', {
                center: [-95, 58],
                zoom: 3,
                view: 'Auto',
                //Add your Azure Maps key to the map SDK. Get an Azure Maps key at https://azure.com/maps. NOTE: The primary key should be used as the key.
                authOptions: {
                    authType: 'subscriptionKey',
                    subscriptionKey: azureMapsSubscriptionKey
                }
            });

            //Wait until the map resources are ready.
            map.events.add('ready', function () {
                //PopUps
                //Create a reusable popup.
                popup = new atlas.Popup();
                cluster: false,

                    //Create a data source and add it to the map.
                    datasource = new atlas.source.DataSource(null, {
                    });
                map.sources.add(datasource);

                var pointLayer = new atlas.layer.BubbleLayer(datasource, null, {
                    radius: 8,
                    color: '#4B0082',
                    strokeWidth: 2,
                    strokeColor: "#DAA520",
                    cluster: false,
                    filter: ['!', ['has', 'point_count']] //Filter out cluste#ff0000 points from this layer.
                });

                map.events.add('click', pointLayer, pointClicked);

                //Add the clusterBubbleLayer and two additional layers to the map.
                map.layers.add(pointLayer);

                //Import the GeoJSON data into the data source.
                datasource.importDataFromUrl(geojsonFeed);
                //PopUps
                //Add a style control to the map.
                map.controls.add(new atlas.control.StyleControl({
                    //Optionally specify which map styles you want to appear in the picker.
                    //All styles available with the S0 license tier appear by default in the control.
                    //If using a S1 tier license, you can use the mapStyles option to add premium styles such as 'satellite' and 'satellite_road_labels' to the control.
                    //To add all available styles, you can use the 'all' keyword.
                    mapStyles: 'all'

                    //Alternatively, specify an array of all the map styles you would like displayed in the style picker.
                    //mapStyles: ['road', 'road_shaded_relief', 'grayscale_light', 'night', 'grayscale_dark', 'satellite', 'satellite_road_labels', 'high_contrast_dark']
                }), {
                    position: 'bottom-left'
                });
                //State
                //Create a data source and add it to the map.
                datasource = new atlas.source.DataSource();
                map.sources.add(datasource);

                //Load the US state boundary data.
                datasource.importDataFromUrl(stateBoundaries);

                //Add a layer for rendering filled polygon area.
                var polygonLayer = new atlas.layer.PolygonLayer(datasource, null, {
                    fillColor: 'rgba(0, 157, 255, 0.2)'
                });

                //Add a layer for rendering a different color polygon for representing a hover state.
                var polygonHoverLayer = new atlas.layer.PolygonLayer(datasource, null, {
                    fillColor: 'rgba(150, 50, 255, 0.2)',

                    //Only polygons with a "GEO_ID" property with a value of '' will be rende#ff0000.
                    filter: ['==', ['get', 'GEO_ID'], '']
                });

                //Add a layer for rendering the styled outline of the polygon data.
                var lineLayer = new atlas.layer.LineLayer(datasource, null, {
                    strokeColor: 'white',
                    strokeWidth: 1
                });

                //Add the layers to be map, but render it below the labels.
                map.layers.add([polygonLayer, polygonHoverLayer, lineLayer], 'labels');

                // When the user moves their mouse over the polygonLayer, we'll update the filter in
                // the polygonHoverLayer to only show the matching state, thus creating a hover effect.
                //State
                //PopUps2



                function pointClicked(e) {
                    //Make sure the event occur#ff0000 on a point feature.
                    if (e.shapes && e.shapes.length > 0) {
                        var content, coordinate;

                        //Check to see if the first value in the shapes array is a Point Shape.
                        if (e.shapes[0] instanceof atlas.Shape && e.shapes[0].getType() === 'Point') {
                            var properties = e.shapes[0].getProperties();
                            content = '<div class="customInfobox"><div class="Wildfire"><b>Загрузка...</b></div></div>';
                            coordinate = e.shapes[0].getCoordinates();
                        } else if (e.shapes[0].type === 'Feature' && e.shapes[0].geometry.type === 'Point') {

                            //Check to see if the feature is a cluster.
                            if (e.shapes[0].properties.cluster) {
                                content = '<div style="padding:10px;">Cluster of ' + e.shapes[0].properties.point_count + ' symbols</div>';
                            } else {
                                //Feature is likely from a VectorTileSource.
                                content = '<div class="customInfobox"><div class="Wildfire"><b>Загрузка...</b></div></div>';
                            }

                            coordinate = e.shapes[0].geometry.coordinates;
                        }

                        if (content && coordinate) {
                            //Populate the popupTemplate with data from the clicked point feature.
                            popup.setOptions({
                                //Update the content of the popup.
                                content: content,

                                //Update the position of the popup with the symbols coordinate.
                                position: coordinate
                            });

                            //Open the popup.
                            popup.open(map);

                        }

                        ajax()

                        function ajax() {
                            $.ajax({
                                type: "GET",
                                //url: "https://api.opencagedata.com/geocode/v1/json?q=" + coordinate[1] + "%2C+" + coordinate[0]+"&key=21b745a1cfd545dbbe493742cdd463fe&pretty=1",
                                url: "http://www.mapquestapi.com/geocoding/v1/reverse?key=QpoHaIdp5vsKSyJtHhx1t4pDjq087gHO&location=" + coordinate[1] + "," + coordinate[0] + "&includeRoadMetadata=true&includeNearestIntersection=true",
                                dataType: 'html',
                                success: function (data) {
                                    var json = JSON.parse(data)
                                    var PROV = json['results'][0]['locations'][0]['adminArea3']
                                    features(PROV)
                                }

                            })
                        }

                        function features(PROV) {
                            var size = 100 * properties.Size * 10
                            $.ajax({
                                
                                url: 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/tilequery/' + coordinate[0] + "," + coordinate[1] + '.json?radius=' + size +'&access_token=pk.eyJ1Ijoic2NoaXNjaGtvciIsImEiOiJja2MzOXpicHAwN3FsMzBxdXU5Z2EwYXlmIn0.4eWp3mohElC2RCbSSS8_Eg',
                                dataType: 'html',
                                type: 'GET',

                                success: function (result) {
                               
                                    var json = JSON.parse(result)
                                   
                                    var infr = 0, water = 0, forest = 0
                                    for (step = 0; step < json.features.length; step++) {
                                        switch (json.features[step].properties.tilequery.layer) {
                                            case 'airport_label':
                                                switch (json.features[step].properties.maki) {
                                                    case 'airport':
                                                        infr += 10;
                                                        break;
                                                    case 'airfield':
                                                        infr += 8;
                                                        break;
                                                    case 'heliport':
                                                        infr += 5;
                                                        break;
                                                    case 'rocket':
                                                        infr += 5;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'building':
                                                infr += 10;
                                                break;

                                            case 'landuse_overlay':
                                                switch (json.features[step].properties.class) {
                                                    case 'national_park':
                                                        infr += 15;
                                                        break;
                                                    case 'wetland':
                                                        forest += 10;
                                                        break;
                                                    case 'wetland_noveg':
                                                        forest += 2;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'landuse':
                                                switch (json.features[step].properties.class) {
                                                    case 'aboriginal_lands':
                                                        infr += 2;
                                                        break;
                                                    case 'agriculture':
                                                        infr += 2;
                                                        forest += 5;
                                                        break;
                                                    case 'airport':
                                                        infr += 9;
                                                        break;
                                                    case 'cemetery':
                                                        infr += 2;
                                                        break;
                                                    case 'grass':
                                                        forest += 5;
                                                        break;
                                                    case 'hospital':
                                                        infr += 5;
                                                        break;
                                                    case 'park':
                                                        infr += 5;
                                                        forest += 4;
                                                        break;
                                                    case 'piste':
                                                        infr += 5;
                                                        forest += 2;
                                                        break;
                                                    case 'pitch':
                                                        infr += 6;
                                                        break;
                                                    case 'school':
                                                        infr += 9;
                                                        break;
                                                    case 'scrub':
                                                        forest += 7;
                                                        break;
                                                    case 'wood':
                                                        forest += 10;
                                                        break;
                                                    case 'facility':
                                                        infr += 8;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'natural_label':
                                                switch (json.features[step].properties.class) {
                                                    case 'bay':
                                                        water += 10;
                                                        break;
                                                    case 'canal':
                                                        infr += 5;
                                                        water += 5;
                                                        break;
                                                    case 'dock':
                                                        infr += 8;
                                                        water += 5;
                                                        break;
                                                    case 'ocean':
                                                        water += 9;
                                                        break;
                                                    case 'reservoir':
                                                        infr += 3;
                                                        water += 8;
                                                        break;
                                                    case 'river':
                                                        water += 3;
                                                        break;
                                                    case 'sea':
                                                        water += 8;
                                                        break;
                                                    case 'stream':
                                                        water += 2;
                                                        break;
                                                    case 'water':
                                                        water += 9;
                                                        break;
                                                    case 'wetland':
                                                        water += 2;
                                                        forest += 7;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;

                                                }
                                                break;

                                            case 'place_label':
                                                switch (json.features[step].properties.type) {
                                                    case 'city':
                                                        infr += 10;
                                                        break;
                                                    case 'town':
                                                        infr += 9;
                                                        break;
                                                    case 'village':
                                                        infr += 5;
                                                        break;
                                                    case 'hamlet':
                                                        infr += 7;
                                                        break;
                                                    case 'quarter':
                                                        infr += 7;
                                                        break;
                                                    case 'neighbourhood':
                                                        infr += 6;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'road':
                                                switch (json.features[step].properties.class) {
                                                    case 'motorway':
                                                        infr += 6;
                                                        break;
                                                    case 'motorway_link':
                                                        infr += 2;
                                                        break;
                                                    case 'trunk':
                                                        infr += 7;
                                                        break;
                                                    case 'trunk_link':
                                                        infr += 2;
                                                        break;
                                                    case 'primary':
                                                        infr += 8;
                                                        break;
                                                    case 'primary_link':
                                                        infr += 2;
                                                        break;
                                                    case 'secondary':
                                                        infr += 6;
                                                        break;
                                                    case 'secondary_link':
                                                        infr += 2;
                                                        break;
                                                    case 'tertiary':
                                                        infr += 3;
                                                        break;
                                                    case 'tertiary_link':
                                                        infr += 1;
                                                        break;
                                                    case 'street':
                                                        infr += 3;
                                                        break;
                                                    case 'street_limited':
                                                        infr += 2;
                                                        break;
                                                    case 'pedestrian':
                                                        infr += 1;
                                                        break;
                                                    case 'construction':
                                                        infr += 1;
                                                        break;
                                                    case 'track':
                                                        infr += 2;
                                                        break;
                                                    case 'service':
                                                        infr += 2;
                                                        break;
                                                    case 'ferry':
                                                        infr += 3;
                                                        break;
                                                    case 'path':
                                                        infr += 1;
                                                        break;
                                                    case 'major_rail':
                                                        infr += 5;
                                                        break;
                                                    case 'minor_rail':
                                                        infr += 3;
                                                        break;
                                                    case 'service_rail':
                                                        infr += 2;
                                                        break;
                                                    case 'aerialway':
                                                        infr += 1;
                                                        break;
                                                    case 'golf':
                                                        infr += 2;
                                                        break;
                                                    case 'roundabout':
                                                        infr += 4;
                                                        break;
                                                    case 'mini_roundabout':
                                                        infr += 2;
                                                        break;
                                                    case 'turning_circle':
                                                        infr += 2;
                                                        break;
                                                    case 'turning_loop':
                                                        infr += 2;
                                                        break;
                                                    case 'traffic_signals':
                                                        infr += 1;
                                                        break;
                                                    case 'junction':
                                                        infr += 3;
                                                        break;
                                                    case 'intersection':
                                                        infr += 3;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'transit_stop_label':
                                                switch (json.features[step].properties.mode) {
                                                    case 'rail':
                                                        infr += 5;
                                                        break;
                                                    case 'metro_rail':
                                                        infr += 7;
                                                        break;
                                                    case 'light_rail':
                                                        infr += 5;
                                                        break;
                                                    case 'tram':
                                                        infr += 6;
                                                        break;
                                                    case 'monorail':
                                                        infr += 6;
                                                        break;
                                                    case 'funicular':
                                                        infr += 4;
                                                        break;
                                                    case 'bicycle':
                                                        infr += 3;
                                                        break;
                                                    case 'bus':
                                                        infr += 3;
                                                        break;
                                                    case 'ferry':
                                                        infr += 2;
                                                        break;
                                                    default:
                                                        infr += 0;
                                                        forest += 0;
                                                        water += 0;
                                                }
                                                break;

                                            case 'water':
                                                water += 10;
                                                break;

                                            case 'waterway':
                                                switch (json.features[step].properties.class) {
                                                    case 'river':
                                                        water += 5;
                                                        break;
                                                    case 'canal':
                                                        infr += 2;
                                                        water += 4;
                                                        break;
                                                    case 'stream':
                                                        water += 3;
                                                        break;
                                                    case 'stream_intermittent':
                                                        water += 2;
                                                        break;
                                                    case 'drain': 
                                                        water += 2;
                                                        break;
                                                    case 'ditch':
                                                        water += 1;
                                                        break;
                                                }
                                                break;
                                            default:
                                                infr = 10;
                                                forest = 90;
                                                water = 10;
                                        }

                                    }
                                    res = [infr, forest, water]
                                    sum = res.reduce((a, b) => a + b, 0);
                                    res = [Math.round(infr * 100 / sum), Math.round(forest * 100 / sum), Math.round(water * 100 / sum)]
                                    mainCalc(PROV, res)
                                   
                                }
                            })
                        }

                        function mainCalc(state,percentage) {
                            $.ajax({
                                type: 'POST',
                                url: '@Url.Action("Button_click", "Home")',
                                dataType: 'html',
                                data: ({
                                    //insert your parameters to pass to controller
                                    province: state,
                                    hectares: properties.Size,
                                    type: properties.Type,
                                    town: percentage[0],
                                    water: percentage[2]
                                }),
                                success: function (result) {
                                    var nameList = result.split(";");
                                    var fix = parseInt(nameList[0])
                                    var variable = parseInt(nameList[1])
                                    var days = parseInt(nameList[2])
                                    var total = fix + variable

                                    content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, state).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Предупреждений нет!').replace(/{Color}/g, '#008000').replace(/{Days}/g, days);

                                    if (percentage[2] > 30) {
                                        content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, state).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Предупреждений нет! <br> Воды для тушения достаточно!').replace(/{Color}/g, '#008000').replace(/{Days}/g, days);
                                    }

                                    if (percentage[2] < 10) {
                                        content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, state).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Внимание! <br> Вблизи может оказаться <br> недостаточно воды для тушения!').replace(/{Color}/g, '#ff0000').replace(/{Days}/g, days);
                                    }

                                    if (percentage[0] > 50) {
                                        content = simplePopupTemplate.replace(/{Total}/g, total).replace(/{State}/g, state).replace(/{Size}/g, properties.Size).replace(/{Variable}/g, variable).replace(/{Fixed}/g, fix).replace(/{Alert}/g, 'Внимание! <br> Могут быть затронуты города <br> или национальные парки!').replace(/{Color}/g, '#ff0000').replace(/{Days}/g, days);
                                    }

                                    if (days > 14) {
                                        content = content.replace(/{timeColor}/g, '#ff0000')
                                    }

                                    else if (days < 7) {
                                        content = content.replace(/{timeColor}/g, '#008000')
                                    }

                                    else {
                                        content = content.replace(/{timeColor}/g, '#000000')
                                    }

                                    if (properties.Type == 'UC') {
                                        content = content.replace(/{Status}/g, '<font color = "#008000";><br>очаг локализирован</font>')
                                    }
                                    else if (properties.Type == 'BH') {
                                        content = content.replace(/{Status}/g, '<font color = "#ff0000";>сдерживается</font>')
                                    }
                                    else {
                                        content = content.replace(/{Status}/g, '<font color = "#008000";>тушится</font>')
                                    }
                                    popup.setOptions({
                                        //Update the content of the popup.
                                        content: content,

                                        //Update the position of the popup with the symbols coordinate.
                                        position: coordinate
                                    });
                                }
                            });
                        }

                    }

                }

            })

        }
    </script>
</head>

<body onload="GetMap()">
    <div id="myMap" style="position:relative;width:100%;min-width:290px;height:600px;"></div>
    
    <hr>
    <footer>
        &copy;Vacanda
    </footer>
</body>
</html>